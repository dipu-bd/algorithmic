 RUNNING  ./benchmark\searching\binary\binary_search_benchmark.dart[67D DONE  ./benchmark\searching\binary\binary_search_benchmark.dart (100 s)
 Benchmark binary searching
  In a sorted list of 1000000000 numbers
   âœ“ collection.binarySearch() (253 ms)
   âœ“ algorithmic.binarySearchQuick() (24 ms)
   âœ“ algorithmic.binarySearch() (24 ms)
   âœ“ algorithmic.binarySearchUpper() (30 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.binarySearch() (147 ms)
   âœ“ algorithmic.binarySearchQuick() (10 ms)
   âœ“ algorithmic.binarySearch() (24 ms)
   âœ“ algorithmic.binarySearchUpper() (30 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.binarySearch() (260 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (87 ms)
   âœ“ algorithmic.binarySearchUpper() (92 ms)

 RUNNING  ./benchmark\searching\binary\lower_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\lower_bound_benchmark.dart (65 s)
 Benchmark lower bound
  In a sorted list of 1000000000 numbers
   âœ“ collection.lowerBound() (256 ms)
   âœ“ algorithmic.lowerBound() (22 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.lowerBound() (252 ms)
   âœ“ algorithmic.lowerBound() (23 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.lowerBound() (256 ms)
   âœ“ algorithmic.lowerBoundBy() (90 ms)

 RUNNING  ./benchmark\searching\binary\upper_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\upper_bound_benchmark.dart (33 s)
 Benchmark upper bound
  In a sorted list of 1000000000 numbers
   âœ“ algorithmic.upperBound() (25 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ algorithmic.upperBound() (87 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ algorithmic.upperBound() (25 ms)

 RUNNING  ./benchmark\searching\linear\forward_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\forward_linear_benchmark.dart (13 s)
 Linear search in a list of 1777000 numbers
  âœ“ list.indexOf() (60 ms)
  âœ“ algorithmic.linearSearch() (59 ms)
 Linear search in a list of 1777000 numbers with a tester
  âœ“ list.indexWhere() (431 ms)
  âœ“ algorithmic.linearSearchBy() (423 ms)

 RUNNING  ./benchmark\searching\linear\reverse_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\reverse_linear_benchmark.dart (16 s)
 Reversed linear search in a list of 1777000 numbers
  âœ“ list.lastIndexOf() (88 ms)
  âœ“ algorithmic.linearSearchReversed() (74 ms)
 Reversed Linear search in a list of 1777000 numbers with a tester
  âœ“ list.lastIndexWhere() (391 ms)
  âœ“ algorithmic.linearSearchReversedBy() (413 ms)

 RUNNING  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart[68D DONE  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart (57 s)
 In a decreasing list of 32 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (279 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (226 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (156 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (137 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (102 us)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (107 us)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (104 us)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (80 us)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (75 us)
 In a decreasing list of 1000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (12 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (8 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (7 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (4 ms)
 In a decreasing list of 3000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (22 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (15 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (12 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (11 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (12 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (16 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (19 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (21 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (23 ms)

 RUNNING  ./benchmark\sorting\counting_benchmark.dart[53D DONE  ./benchmark\sorting\counting_benchmark.dart (39 s)
 Counting sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (283 ms)
   âœ“ algorithmic.countingSort() (50 ms)
   âœ“ algorithmic.countingSortOf() (130 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.countingSort() (51 ms)
   âœ“ algorithmic.countingSortOf() (128 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (291 ms)
   âœ“ algorithmic.countingSort() (52 ms)
   âœ“ algorithmic.countingSortOf() (122 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (180 ms)
   âœ“ algorithmic.countingSort() (22 ms)
   âœ“ algorithmic.countingSortOf() (73 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.countingSort() (55 ms)
   âœ“ algorithmic.countingSortOf() (127 ms)

 RUNNING  ./benchmark\sorting\mergesort_benchmark.dart[54D DONE  ./benchmark\sorting\mergesort_benchmark.dart (25 s)
 Mergesort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (283 ms)
   âœ“ algorithmic.mergeSort() (322 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (285 ms)
   âœ“ algorithmic.mergeSort() (323 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (290 ms)
   âœ“ algorithmic.mergeSort() (333 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (178 ms)
   âœ“ algorithmic.mergeSort() (324 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.mergeSort() (543 ms)

 RUNNING  ./benchmark\sorting\n_square_time_benchmark.dart[58D DONE  ./benchmark\sorting\n_square_time_benchmark.dart (76 s)
 Benchmark sort algorithms with small list of integers
  In a shuffled list of 32 numbers
   âœ“ list.sort() (323 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (36 us)
   âœ“ algorithmic.insertionSort() (41 us)
   âœ“ algorithmic.combSort() (92 us)
   âœ“ algorithmic.selectionSort() (375 us)
   âœ“ algorithmic.bubbleSort() (466 us)
  In an increasing list of 32 numbers
   âœ“ list.sort() (132 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (36 us)
   âœ“ algorithmic.insertionSort() (42 us)
   âœ“ algorithmic.combSort() (93 us)
   âœ“ algorithmic.selectionSort() (375 us)
   âœ“ algorithmic.bubbleSort() (465 us)
  In a decreasing list of 32 numbers
   âœ“ list.sort() (140 us)
   âœ“ algorithmic.cocktailShakerSort() (34 us)
   âœ“ algorithmic.gnomeSort() (42 us)
   âœ“ algorithmic.insertionSort() (51 us)
   âœ“ algorithmic.combSort() (100 us)
   âœ“ algorithmic.selectionSort() (396 us)
   âœ“ algorithmic.bubbleSort() (509 us)
  In a list of 32 numbers with 4 repetead elements
   âœ“ list.sort() (138 us)
   âœ“ algorithmic.cocktailShakerSort() (33 us)
   âœ“ algorithmic.gnomeSort() (41 us)
   âœ“ algorithmic.insertionSort() (46 us)
   âœ“ algorithmic.combSort() (100 us)
   âœ“ algorithmic.selectionSort() (396 us)
   âœ“ algorithmic.bubbleSort() (471 us)
  In an increasing list of 32 numbers with a custom compare
   âœ“ list.sort() (134 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (103 us)
   âœ“ algorithmic.insertionSort() (99 us)
   âœ“ algorithmic.combSort() (94 us)
   âœ“ algorithmic.selectionSort() (1 ms)
   âœ“ algorithmic.bubbleSort() (1 ms)

 RUNNING  ./benchmark\sorting\quicksort_benchmark.dart[54D DONE  ./benchmark\sorting\quicksort_benchmark.dart (39 s)
 Quicksort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (290 ms)
   âœ“ algorithmic.quickSortHaore() (54 ms)
   âœ“ algorithmic.quickSortLomuto() (211 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (289 ms)
   âœ“ algorithmic.quickSortHaore() (52 ms)
   âœ“ algorithmic.quickSortLomuto() (211 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (298 ms)
   âœ“ algorithmic.quickSortHaore() (54 ms)
   âœ“ algorithmic.quickSortLomuto() (273 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (185 ms)
   âœ“ algorithmic.quickSortHaore() (38 ms)
   âœ“ algorithmic.quickSortLomuto() (126 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (278 ms)
   âœ“ algorithmic.quickSortHaore() (284 ms)
   âœ“ algorithmic.quickSortLomuto() (767 ms)

 RUNNING  ./benchmark\sorting\quicksort_threshold_benchmark.dart[64D DONE  ./benchmark\sorting\quicksort_threshold_benchmark.dart (17 s)
 Benchmark Quicksort with different [threshold]
  âœ“ algorithmic.quickSortHaore(threshold = 0) (759 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 4) (794 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 8) (658 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 16) (574 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 32) (526 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 48) (534 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 64) (501 ms)

 RUNNING  ./benchmark\sorting\radix_sort_benchmark.dart[55D DONE  ./benchmark\sorting\radix_sort_benchmark.dart (38 s)
 Radix sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.radixSort() (130 ms)
   âœ“ algorithmic.radixSortOf() (318 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.radixSort() (131 ms)
   âœ“ algorithmic.radixSortOf() (317 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (291 ms)
   âœ“ algorithmic.radixSort() (132 ms)
   âœ“ algorithmic.radixSortOf() (314 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (179 ms)
   âœ“ algorithmic.radixSort() (56 ms)
   âœ“ algorithmic.radixSortOf() (119 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (280 ms)
   âœ“ algorithmic.radixSort() (140 ms)
   âœ“ algorithmic.radixSortOf() (328 ms)

 RUNNING  ./benchmark\sorting\radix_sort_radix_power_benchmark.dart[67D DONE  ./benchmark\sorting\radix_sort_radix_power_benchmark.dart (25 s)
 In a decreasing list of 777000 numbers
  âœ“ algorithmic.radixSort(radixPower: 4) (454 ms)
  âœ“ algorithmic.radixSort(radixPower: 5) (361 ms)
  âœ“ algorithmic.radixSort(radixPower: 6) (341 ms)
  âœ“ algorithmic.radixSort(radixPower: 7) (248 ms)
  âœ“ algorithmic.radixSort(radixPower: 8) (255 ms)
  âœ“ algorithmic.radixSort(radixPower: 9 (244 ms)
  âœ“ algorithmic.radixSort(radixPower: 10 (153 ms)
  âœ“ algorithmic.radixSort(radixPower: 11 (156 ms)
  âœ“ algorithmic.radixSort(radixPower: 12 (153 ms)
  âœ“ algorithmic.radixSort(radixPower: 13 (159 ms)
  âœ“ algorithmic.radixSort(radixPower: 14 (172 ms)

 RUNNING  ./benchmark\string\metric\damerau_levenshtein_benchmark.dart[70D DONE  ./benchmark\string\metric\damerau_levenshtein_benchmark.dart (26 s)
 Two lists of 1000 items each
  âœ“ edit_distance.Damerau().distance() (437 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (44 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (259 ms)
 Two lists of 100 items each
  âœ“ edit_distance.Damerau().distance() (374 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (46 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (251 ms)
 Two lists of 100 vs 1000 items
  âœ“ edit_distance.Damerau().distance() (366 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (41 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (250 ms)
 Two lists of 1000 vs 100 items
  âœ“ edit_distance.Damerau().distance() (384 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (46 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (242 ms)

 RUNNING  ./benchmark\string\metric\levenshtein_benchmark.dart[62D DONE  ./benchmark\string\metric\levenshtein_benchmark.dart (17 s)
 Two lists of 5000 items each
  âœ“ edit_distance.Levenshtein().distance() (616 ms)
  âœ“ algorithmic.levenshteinDistance() (522 ms)
 Two lists of 100 items each
  âœ“ edit_distance.Levenshtein().distance() (22 ms)
  âœ“ algorithmic.levenshteinDistance() (19 ms)
 Two lists of 100 vs 10000 items
  âœ“ edit_distance.Levenshtein().distance() (202 ms)
  âœ“ algorithmic.levenshteinDistance() (155 ms)
 Two lists of 10000 vs 100 items
  âœ“ edit_distance.Levenshtein().distance() (236 ms)
  âœ“ algorithmic.levenshteinDistance() (156 ms)

Benchmark suites: 15 passed, 15 total
Benchmarks:       184 passed, 184 total
Time:             593 s
Ran all benchmark suites.
