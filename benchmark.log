 RUNNING  ./benchmark\searching\binary\binary_search_benchmark.dart[67D DONE  ./benchmark\searching\binary\binary_search_benchmark.dart (96 s)
 Benchmark binary searching
  In a sorted list of 1000000000 numbers
   âœ“ collection.binarySearch() (264 ms)
   âœ“ algorithmic.binarySearchQuick() (24 ms)
   âœ“ algorithmic.binarySearch() (26 ms)
   âœ“ algorithmic.binarySearchUpper() (31 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.binarySearch() (153 ms)
   âœ“ algorithmic.binarySearchQuick() (9 ms)
   âœ“ algorithmic.binarySearch() (27 ms)
   âœ“ algorithmic.binarySearchUpper() (30 ms)
  In a sorted list of 1000000000 numbers with a custom comparator
   âœ“ collection.binarySearch() (267 ms)
   âœ“ algorithmic.binarySearchQuick() (24 ms)
   âœ“ algorithmic.binarySearch() (89 ms)
   âœ“ algorithmic.binarySearchUpper() (89 ms)

 RUNNING  ./benchmark\searching\binary\lower_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\lower_bound_benchmark.dart (64 s)
 Benchmark lower bound
  In a sorted list of 1000000000 numbers
   âœ“ collection.lowerBound() (261 ms)
   âœ“ algorithmic.lowerBound() (25 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.lowerBound() (260 ms)
   âœ“ algorithmic.lowerBound() (27 ms)
  In a sorted list of 1000000000 numbers with a custom comparator
   âœ“ collection.lowerBound() (263 ms)
   âœ“ algorithmic.lowerBoundBy() (88 ms)

 RUNNING  ./benchmark\searching\binary\upper_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\upper_bound_benchmark.dart (43 s)
 Benchmark upper bound
  In a sorted list of 1000000000 numbers
   âœ“ algorithmic.upperBound() (30 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ algorithmic.upperBound() (93 ms)
  In a sorted list of 1000000000 numbers with a custom comparator
   âœ“ algorithmic.upperBound() (30 ms)

 RUNNING  ./benchmark\searching\linear\forward_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\forward_linear_benchmark.dart (12 s)
 Linear search in a list of 1777000 numbers
  âœ“ list.indexOf() (59 ms)
  âœ“ algorithmic.linearSearch() (58 ms)
 Linear search in a list of 1777000 numbers with a tester
  âœ“ list.indexWhere() (401 ms)
  âœ“ algorithmic.linearSearchBy() (415 ms)

 RUNNING  ./benchmark\searching\linear\reverse_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\reverse_linear_benchmark.dart (16 s)
 Reversed linear search in a list of 1777000 numbers
  âœ“ list.lastIndexOf() (88 ms)
  âœ“ algorithmic.linearSearchReversed() (76 ms)
 Reversed Linear search in a list of 1777000 numbers with a tester
  âœ“ list.lastIndexWhere() (400 ms)
  âœ“ algorithmic.linearSearchReversedBy() (438 ms)

 RUNNING  ./benchmark\sorting\mergesort_benchmark.dart[54D DONE  ./benchmark\sorting\mergesort_benchmark.dart (25 s)
 Mergesort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (276 ms)
   âœ“ algorithmic.mergeSort() (307 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (275 ms)
   âœ“ algorithmic.mergeSort() (309 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.mergeSort() (313 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (176 ms)
   âœ“ algorithmic.mergeSort() (310 ms)
  In an increasing list of 777000 numbers with a custom comparator
   âœ“ list.sort() (277 ms)
   âœ“ algorithmic.mergeSort() (622 ms)

 RUNNING  ./benchmark\sorting\n_square_time_benchmark.dart[58D DONE  ./benchmark\sorting\n_square_time_benchmark.dart (54 s)
 Benchmark sort algorithms with small list of integers
  In a shuffled list of 32 numbers
   âœ“ list.sort() (300 us)
   âœ“ algorithmic.gnomeSort() (36 us)
   âœ“ algorithmic.insertionSort() (72 us)
   âœ“ algorithmic.selectionSort() (311 us)
   âœ“ algorithmic.bubbleSort() (467 us)
  In an increasing list of 32 numbers
   âœ“ list.sort() (129 us)
   âœ“ algorithmic.gnomeSort() (37 us)
   âœ“ algorithmic.insertionSort() (71 us)
   âœ“ algorithmic.selectionSort() (337 us)
   âœ“ algorithmic.bubbleSort() (466 us)
  In a decreasing list of 32 numbers
   âœ“ list.sort() (138 us)
   âœ“ algorithmic.gnomeSort() (39 us)
   âœ“ algorithmic.insertionSort() (73 us)
   âœ“ algorithmic.selectionSort() (327 us)
   âœ“ algorithmic.bubbleSort() (480 us)
  In a list of 32 numbers with 1000 repetead elements
   âœ“ list.sort() (135 us)
   âœ“ algorithmic.gnomeSort() (37 us)
   âœ“ algorithmic.insertionSort() (71 us)
   âœ“ algorithmic.selectionSort() (335 us)
   âœ“ algorithmic.bubbleSort() (468 us)
  In an increasing list of 32 numbers with a custom comparator
   âœ“ list.sort() (134 us)
   âœ“ algorithmic.gnomeSort() (103 us)
   âœ“ algorithmic.insertionSort() (173 us)
   âœ“ algorithmic.selectionSort() (1 ms)
   âœ“ algorithmic.bubbleSort() (1 ms)

 RUNNING  ./benchmark\sorting\quicksort_benchmark.dart[54D DONE  ./benchmark\sorting\quicksort_benchmark.dart (39 s)
 Quicksort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (279 ms)
   âœ“ algorithmic.quickSortHaore() (52 ms)
   âœ“ algorithmic.quickSortLomuto() (204 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (280 ms)
   âœ“ algorithmic.quickSortHaore() (52 ms)
   âœ“ algorithmic.quickSortLomuto() (204 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (290 ms)
   âœ“ algorithmic.quickSortHaore() (54 ms)
   âœ“ algorithmic.quickSortLomuto() (266 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (178 ms)
   âœ“ algorithmic.quickSortHaore() (36 ms)
   âœ“ algorithmic.quickSortLomuto() (122 ms)
  In an increasing list of 777000 numbers with a custom comparator
   âœ“ list.sort() (280 ms)
   âœ“ algorithmic.quickSortHaore() (275 ms)
   âœ“ algorithmic.quickSortLomuto() (799 ms)

 RUNNING  ./benchmark\sorting\quicksort_threshold_benchmark.dart[64D DONE  ./benchmark\sorting\quicksort_threshold_benchmark.dart (23 s)
 Benchmark Quicksort with different [threshold]
  âœ“ algorithmic.quickSortHaore(threshold = 0) (761 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 4) (770 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 8) (645 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 16) (573 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 32) (526 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 48) (529 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 64) (496 ms)

Benchmark suites: 9 passed, 9 total
Benchmarks:       86 passed, 86 total
Time:             377 s
Ran all benchmark suites.
