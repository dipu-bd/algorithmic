 RUNNING  ./benchmark\searching\binary\binary_search_benchmark.dart[67D DONE  ./benchmark\searching\binary\binary_search_benchmark.dart (103 s)
 Benchmark binary searching
  In a sorted list of 1000000000 numbers
   âœ“ collection.binarySearch() (259 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (23 ms)
   âœ“ algorithmic.binarySearchUpper() (30 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.binarySearch() (154 ms)
   âœ“ algorithmic.binarySearchQuick() (10 ms)
   âœ“ algorithmic.binarySearch() (24 ms)
   âœ“ algorithmic.binarySearchUpper() (29 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.binarySearch() (265 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (86 ms)
   âœ“ algorithmic.binarySearchUpper() (91 ms)

 RUNNING  ./benchmark\searching\binary\lower_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\lower_bound_benchmark.dart (57 s)
 Benchmark lower bound
  In a sorted list of 1000000000 numbers
   âœ“ collection.lowerBound() (289 ms)
   âœ“ algorithmic.lowerBound() (22 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.lowerBound() (261 ms)
   âœ“ algorithmic.lowerBound() (23 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.lowerBound() (264 ms)
   âœ“ algorithmic.lowerBoundBy() (89 ms)

 RUNNING  ./benchmark\searching\binary\upper_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\upper_bound_benchmark.dart (32 s)
 Benchmark upper bound
  In a sorted list of 1000000000 numbers
   âœ“ algorithmic.upperBound() (25 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ algorithmic.upperBound() (89 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ algorithmic.upperBound() (25 ms)

 RUNNING  ./benchmark\searching\linear\forward_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\forward_linear_benchmark.dart (13 s)
 Linear search in a list of 1777000 numbers
  âœ“ list.indexOf() (64 ms)
  âœ“ algorithmic.linearSearch() (59 ms)
 Linear search in a list of 1777000 numbers with a tester
  âœ“ list.indexWhere() (390 ms)
  âœ“ algorithmic.linearSearchBy() (420 ms)

 RUNNING  ./benchmark\searching\linear\reverse_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\reverse_linear_benchmark.dart (16 s)
 Reversed linear search in a list of 1777000 numbers
  âœ“ list.lastIndexOf() (87 ms)
  âœ“ algorithmic.linearSearchReversed() (73 ms)
 Reversed Linear search in a list of 1777000 numbers with a tester
  âœ“ list.lastIndexWhere() (389 ms)
  âœ“ algorithmic.linearSearchReversedBy() (424 ms)

 RUNNING  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart[68D DONE  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart (57 s)
 In a decreasing list of 32 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (273 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (226 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (167 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (142 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (107 us)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (122 us)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (125 us)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (81 us)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (85 us)
 In a decreasing list of 1000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (14 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (9 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (8 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (4 ms)
 In a decreasing list of 3000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (25 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (18 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (14 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (13 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (14 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (18 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (20 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (22 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (24 ms)

 RUNNING  ./benchmark\sorting\counting_benchmark.dart[53D DONE  ./benchmark\sorting\counting_benchmark.dart (39 s)
 Counting sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (280 ms)
   âœ“ algorithmic.countingSort() (53 ms)
   âœ“ algorithmic.countingSortOf() (135 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (279 ms)
   âœ“ algorithmic.countingSort() (54 ms)
   âœ“ algorithmic.countingSortOf() (129 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (287 ms)
   âœ“ algorithmic.countingSort() (54 ms)
   âœ“ algorithmic.countingSortOf() (124 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (178 ms)
   âœ“ algorithmic.countingSort() (22 ms)
   âœ“ algorithmic.countingSortOf() (72 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (278 ms)
   âœ“ algorithmic.countingSort() (53 ms)
   âœ“ algorithmic.countingSortOf() (126 ms)

 RUNNING  ./benchmark\sorting\mergesort_benchmark.dart[54D DONE  ./benchmark\sorting\mergesort_benchmark.dart (25 s)
 Mergesort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (284 ms)
   âœ“ algorithmic.mergeSort() (309 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (293 ms)
   âœ“ algorithmic.mergeSort() (313 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (302 ms)
   âœ“ algorithmic.mergeSort() (316 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (188 ms)
   âœ“ algorithmic.mergeSort() (313 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (292 ms)
   âœ“ algorithmic.mergeSort() (731 ms)

 RUNNING  ./benchmark\sorting\n_square_time_benchmark.dart[58D DONE  ./benchmark\sorting\n_square_time_benchmark.dart (76 s)
 Benchmark sort algorithms with small list of integers
  In a shuffled list of 32 numbers
   âœ“ list.sort() (284 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (36 us)
   âœ“ algorithmic.insertionSort() (41 us)
   âœ“ algorithmic.combSort() (92 us)
   âœ“ algorithmic.selectionSort() (386 us)
   âœ“ algorithmic.bubbleSort() (465 us)
  In an increasing list of 32 numbers
   âœ“ list.sort() (131 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (36 us)
   âœ“ algorithmic.insertionSort() (42 us)
   âœ“ algorithmic.combSort() (93 us)
   âœ“ algorithmic.selectionSort() (363 us)
   âœ“ algorithmic.bubbleSort() (485 us)
  In a decreasing list of 32 numbers
   âœ“ list.sort() (143 us)
   âœ“ algorithmic.cocktailShakerSort() (34 us)
   âœ“ algorithmic.gnomeSort() (40 us)
   âœ“ algorithmic.insertionSort() (49 us)
   âœ“ algorithmic.combSort() (96 us)
   âœ“ algorithmic.selectionSort() (403 us)
   âœ“ algorithmic.bubbleSort() (524 us)
  In a list of 32 numbers with 4 repetead elements
   âœ“ list.sort() (133 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (40 us)
   âœ“ algorithmic.insertionSort() (46 us)
   âœ“ algorithmic.combSort() (99 us)
   âœ“ algorithmic.selectionSort() (396 us)
   âœ“ algorithmic.bubbleSort() (464 us)
  In an increasing list of 32 numbers with a custom compare
   âœ“ list.sort() (131 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (102 us)
   âœ“ algorithmic.insertionSort() (97 us)
   âœ“ algorithmic.combSort() (94 us)
   âœ“ algorithmic.selectionSort() (1 ms)
   âœ“ algorithmic.bubbleSort() (1 ms)

 RUNNING  ./benchmark\sorting\quicksort_benchmark.dart[54D DONE  ./benchmark\sorting\quicksort_benchmark.dart (39 s)
 Quicksort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (283 ms)
   âœ“ algorithmic.quickSortHaore() (56 ms)
   âœ“ algorithmic.quickSortLomuto() (210 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (283 ms)
   âœ“ algorithmic.quickSortHaore() (56 ms)
   âœ“ algorithmic.quickSortLomuto() (209 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (291 ms)
   âœ“ algorithmic.quickSortHaore() (57 ms)
   âœ“ algorithmic.quickSortLomuto() (271 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (180 ms)
   âœ“ algorithmic.quickSortHaore() (39 ms)
   âœ“ algorithmic.quickSortLomuto() (126 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (283 ms)
   âœ“ algorithmic.quickSortHaore() (281 ms)
   âœ“ algorithmic.quickSortLomuto() (848 ms)

 RUNNING  ./benchmark\sorting\quicksort_threshold_benchmark.dart[64D DONE  ./benchmark\sorting\quicksort_threshold_benchmark.dart (17 s)
 Benchmark Quicksort with different [threshold]
  âœ“ algorithmic.quickSortHaore(threshold = 0) (761 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 4) (788 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 8) (650 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 16) (573 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 32) (524 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 48) (534 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 64) (496 ms)

 RUNNING  ./benchmark\sorting\radix_sort_benchmark.dart[55D DONE  ./benchmark\sorting\radix_sort_benchmark.dart (38 s)
 Radix sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (283 ms)
   âœ“ algorithmic.radixSort() (128 ms)
   âœ“ algorithmic.radixSortOf() (314 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (283 ms)
   âœ“ algorithmic.radixSort() (129 ms)
   âœ“ algorithmic.radixSortOf() (311 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (292 ms)
   âœ“ algorithmic.radixSort() (128 ms)
   âœ“ algorithmic.radixSortOf() (311 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (182 ms)
   âœ“ algorithmic.radixSort() (53 ms)
   âœ“ algorithmic.radixSortOf() (115 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.radixSort() (136 ms)
   âœ“ algorithmic.radixSortOf() (322 ms)

 RUNNING  ./benchmark\sorting\radix_sort_radix_power_benchmark.dart[67D DONE  ./benchmark\sorting\radix_sort_radix_power_benchmark.dart (25 s)
 In a decreasing list of 777000 numbers
  âœ“ algorithmic.radixSort(radixPower: 4) (394 ms)
  âœ“ algorithmic.radixSort(radixPower: 5) (319 ms)
  âœ“ algorithmic.radixSort(radixPower: 6) (295 ms)
  âœ“ algorithmic.radixSort(radixPower: 7) (214 ms)
  âœ“ algorithmic.radixSort(radixPower: 8) (217 ms)
  âœ“ algorithmic.radixSort(radixPower: 9 (200 ms)
  âœ“ algorithmic.radixSort(radixPower: 10 (129 ms)
  âœ“ algorithmic.radixSort(radixPower: 11 (129 ms)
  âœ“ algorithmic.radixSort(radixPower: 12 (131 ms)
  âœ“ algorithmic.radixSort(radixPower: 13 (138 ms)
  âœ“ algorithmic.radixSort(radixPower: 14 (147 ms)

 RUNNING  ./benchmark\string\metric\damerau_levenshtein_benchmark.dart[70D DONE  ./benchmark\string\metric\damerau_levenshtein_benchmark.dart (26 s)
 Two lists of 1000 items each
  âœ“ edit_distance.Damerau().distance() (431 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (42 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (259 ms)
 Two lists of 100 items each
  âœ“ edit_distance.Damerau().distance() (370 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (43 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (253 ms)
 Two lists of 100 vs 1000 items
  âœ“ edit_distance.Damerau().distance() (366 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (38 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (251 ms)
 Two lists of 1000 vs 100 items
  âœ“ edit_distance.Damerau().distance() (383 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (44 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (241 ms)

 RUNNING  ./benchmark\string\metric\lcs_benchmark.dart[54D DONE  ./benchmark\string\metric\lcs_benchmark.dart (17 s)
 Two lists of 1000 items each
  âœ“ edit_distance.LongestCommonSubsequence().distance() (350 ms)
  âœ“ algorithmic.longestCommonSubsequenceLength() (157 ms)
 Two lists of 100 items each
  âœ“ edit_distance.LongestCommonSubsequence().distance() (36 ms)
  âœ“ algorithmic.longestCommonSubsequenceLength() (16 ms)
 Two lists of 100 vs 10000 items
  âœ“ edit_distance.LongestCommonSubsequence().distance() (335 ms)
  âœ“ algorithmic.longestCommonSubsequenceLength() (147 ms)
 Two lists of 10000 vs 100 items
  âœ“ edit_distance.LongestCommonSubsequence().distance() (385 ms)
  âœ“ algorithmic.longestCommonSubsequenceLength() (146 ms)

 RUNNING  ./benchmark\string\metric\levenshtein_benchmark.dart[62D DONE  ./benchmark\string\metric\levenshtein_benchmark.dart (17 s)
 Two lists of 5000 items each
  âœ“ edit_distance.Levenshtein().distance() (604 ms)
  âœ“ algorithmic.levenshteinDistance() (517 ms)
 Two lists of 100 items each
  âœ“ edit_distance.Levenshtein().distance() (21 ms)
  âœ“ algorithmic.levenshteinDistance() (19 ms)
 Two lists of 100 vs 10000 items
  âœ“ edit_distance.Levenshtein().distance() (200 ms)
  âœ“ algorithmic.levenshteinDistance() (154 ms)
 Two lists of 10000 vs 100 items
  âœ“ edit_distance.Levenshtein().distance() (234 ms)
  âœ“ algorithmic.levenshteinDistance() (155 ms)

 RUNNING  ./benchmark\string\metric\tversky_benchmark.dart[58D DONE  ./benchmark\string\metric\tversky_benchmark.dart (32 s)
 Two lists of 777000 items each
  âœ“ edit_distance.Jaccard().distance() (244 ms)
  âœ“ algorithmic.jaccardDistanceOf() (159 ms)
  âœ“ algorithmic.jaccardIndexOf() (173 ms)
  âœ“ algorithmic.diceIndexOf() (169 ms)
  âœ“ algorithmic.tverskyIndex() (159 ms)
 Two lists of 77 items each
  âœ“ edit_distance.Jaccard().distance() (617 us)
  âœ“ algorithmic.jaccardDistanceOf() (417 us)
  âœ“ algorithmic.jaccardIndexOf() (410 us)
  âœ“ algorithmic.diceIndexOf() (416 us)
  âœ“ algorithmic.tverskyIndex() (413 us)
 Two lists of 777000 items each | ngram: 77
  âœ“ edit_distance.Jaccard().distance() (321 ms)
  âœ“ algorithmic.jaccardDistanceOf() (340 ms)
  âœ“ algorithmic.jaccardIndexOf() (338 ms)
  âœ“ algorithmic.diceIndexOf() (335 ms)
  âœ“ algorithmic.tverskyIndex() (336 ms)

Benchmark suites: 17 passed, 17 total
Benchmarks:       207 passed, 207 total
Time:             639 s
Ran all benchmark suites.
