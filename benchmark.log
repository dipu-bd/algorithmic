 RUNNING  ./benchmark\searching\binary\binary_search_benchmark.dart[67D DONE  ./benchmark\searching\binary\binary_search_benchmark.dart (91 s)
 Benchmark binary searching
  In a sorted list of 1000000000 numbers
   âœ“ collection.binarySearch() (254 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (23 ms)
   âœ“ algorithmic.binarySearchUpper() (30 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.binarySearch() (152 ms)
   âœ“ algorithmic.binarySearchQuick() (10 ms)
   âœ“ algorithmic.binarySearch() (25 ms)
   âœ“ algorithmic.binarySearchUpper() (29 ms)
  In a sorted list of 1000000000 numbers with a custom comparator
   âœ“ collection.binarySearch() (257 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (86 ms)
   âœ“ algorithmic.binarySearchUpper() (92 ms)

 RUNNING  ./benchmark\searching\binary\lower_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\lower_bound_benchmark.dart (64 s)
 Benchmark lower bound
  In a sorted list of 1000000000 numbers
   âœ“ collection.lowerBound() (259 ms)
   âœ“ algorithmic.lowerBound() (22 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.lowerBound() (254 ms)
   âœ“ algorithmic.lowerBound() (23 ms)
  In a sorted list of 1000000000 numbers with a custom comparator
   âœ“ collection.lowerBound() (258 ms)
   âœ“ algorithmic.lowerBoundBy() (89 ms)

 RUNNING  ./benchmark\searching\binary\upper_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\upper_bound_benchmark.dart (43 s)
 Benchmark upper bound
  In a sorted list of 1000000000 numbers
   âœ“ algorithmic.upperBound() (25 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ algorithmic.upperBound() (88 ms)
  In a sorted list of 1000000000 numbers with a custom comparator
   âœ“ algorithmic.upperBound() (25 ms)

 RUNNING  ./benchmark\searching\linear\forward_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\forward_linear_benchmark.dart (13 s)
 Linear search in a list of 1777000 numbers
  âœ“ list.indexOf() (59 ms)
  âœ“ algorithmic.linearSearch() (59 ms)
 Linear search in a list of 1777000 numbers with a tester
  âœ“ list.indexWhere() (388 ms)
  âœ“ algorithmic.linearSearchBy() (417 ms)

 RUNNING  ./benchmark\searching\linear\reverse_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\reverse_linear_benchmark.dart (16 s)
 Reversed linear search in a list of 1777000 numbers
  âœ“ list.lastIndexOf() (88 ms)
  âœ“ algorithmic.linearSearchReversed() (74 ms)
 Reversed Linear search in a list of 1777000 numbers with a tester
  âœ“ list.lastIndexWhere() (397 ms)
  âœ“ algorithmic.linearSearchReversedBy() (430 ms)

 RUNNING  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart[68D DONE  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart (61 s)
 In a decreasing list of 32 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (271 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.4) (252 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.6) (198 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.8) (165 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (130 us)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (106 us)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (107 us)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (80 us)
  âœ“ algorithmic.combSort(shrinkFactor: 5.5) (79 us)
  âœ“ algorithmic.combSort(shrinkFactor: 6) (80 us)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (80 us)
 In a decreasing list of 1000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (12 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.4) (10 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.6) (7 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.8) (6 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (4 ms)
 In a decreasing list of 3000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (22 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.4) (18 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.6) (13 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.8) (10 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (11 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (17 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (19 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (20 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (22 ms)

 RUNNING  ./benchmark\sorting\mergesort_benchmark.dart[54D DONE  ./benchmark\sorting\mergesort_benchmark.dart (25 s)
 Mergesort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (275 ms)
   âœ“ algorithmic.mergeSort() (308 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (276 ms)
   âœ“ algorithmic.mergeSort() (313 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (287 ms)
   âœ“ algorithmic.mergeSort() (326 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (179 ms)
   âœ“ algorithmic.mergeSort() (318 ms)
  In an increasing list of 777000 numbers with a custom comparator
   âœ“ list.sort() (276 ms)
   âœ“ algorithmic.mergeSort() (635 ms)

 RUNNING  ./benchmark\sorting\n_square_time_benchmark.dart[58D DONE  ./benchmark\sorting\n_square_time_benchmark.dart (76 s)
 Benchmark sort algorithms with small list of integers
  In a shuffled list of 32 numbers
   âœ“ list.sort() (128 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (42 us)
   âœ“ algorithmic.insertionSort() (42 us)
   âœ“ algorithmic.combSort() (105 us)
   âœ“ algorithmic.selectionSort() (407 us)
   âœ“ algorithmic.bubbleSort() (476 us)
  In an increasing list of 32 numbers
   âœ“ list.sort() (131 us)
   âœ“ algorithmic.cocktailShakerSort() (33 us)
   âœ“ algorithmic.gnomeSort() (42 us)
   âœ“ algorithmic.insertionSort() (42 us)
   âœ“ algorithmic.combSort() (106 us)
   âœ“ algorithmic.selectionSort() (395 us)
   âœ“ algorithmic.bubbleSort() (474 us)
  In a decreasing list of 32 numbers
   âœ“ list.sort() (135 us)
   âœ“ algorithmic.cocktailShakerSort() (35 us)
   âœ“ algorithmic.gnomeSort() (48 us)
   âœ“ algorithmic.insertionSort() (50 us)
   âœ“ algorithmic.combSort() (109 us)
   âœ“ algorithmic.selectionSort() (404 us)
   âœ“ algorithmic.bubbleSort() (499 us)
  In a list of 32 numbers with 1000 repetead elements
   âœ“ list.sort() (135 us)
   âœ“ algorithmic.cocktailShakerSort() (33 us)
   âœ“ algorithmic.gnomeSort() (42 us)
   âœ“ algorithmic.insertionSort() (43 us)
   âœ“ algorithmic.combSort() (109 us)
   âœ“ algorithmic.selectionSort() (420 us)
   âœ“ algorithmic.bubbleSort() (611 us)
  In an increasing list of 32 numbers with a custom comparator
   âœ“ list.sort() (358 us)
   âœ“ algorithmic.cocktailShakerSort() (34 us)
   âœ“ algorithmic.gnomeSort() (108 us)
   âœ“ algorithmic.insertionSort() (103 us)
   âœ“ algorithmic.combSort() (109 us)
   âœ“ algorithmic.selectionSort() (1 ms)
   âœ“ algorithmic.bubbleSort() (1 ms)

 RUNNING  ./benchmark\sorting\quicksort_benchmark.dart[54D DONE  ./benchmark\sorting\quicksort_benchmark.dart (39 s)
 Quicksort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (279 ms)
   âœ“ algorithmic.quickSortHaore() (52 ms)
   âœ“ algorithmic.quickSortLomuto() (205 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.quickSortHaore() (52 ms)
   âœ“ algorithmic.quickSortLomuto() (205 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (291 ms)
   âœ“ algorithmic.quickSortHaore() (53 ms)
   âœ“ algorithmic.quickSortLomuto() (278 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (186 ms)
   âœ“ algorithmic.quickSortHaore() (38 ms)
   âœ“ algorithmic.quickSortLomuto() (125 ms)
  In an increasing list of 777000 numbers with a custom comparator
   âœ“ list.sort() (291 ms)
   âœ“ algorithmic.quickSortHaore() (274 ms)
   âœ“ algorithmic.quickSortLomuto() (605 ms)

 RUNNING  ./benchmark\sorting\quicksort_threshold_benchmark.dart[64D DONE  ./benchmark\sorting\quicksort_threshold_benchmark.dart (17 s)
 Benchmark Quicksort with different [threshold]
  âœ“ algorithmic.quickSortHaore(threshold = 0) (763 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 4) (788 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 8) (645 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 16) (591 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 32) (543 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 48) (549 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 64) (512 ms)

Benchmark suites: 10 passed, 10 total
Benchmarks:       125 passed, 125 total
Time:             450 s
Ran all benchmark suites.
