 RUNNING  ./benchmark\searching\binary\binary_search_benchmark.dart[67D DONE  ./benchmark\searching\binary\binary_search_benchmark.dart (93 s)
 Benchmark binary searching
  In a sorted list of 1000000000 numbers
   âœ“ collection.binarySearch() (256 ms)
   âœ“ algorithmic.binarySearchQuick() (24 ms)
   âœ“ algorithmic.binarySearch() (23 ms)
   âœ“ algorithmic.binarySearchUpper() (30 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.binarySearch() (147 ms)
   âœ“ algorithmic.binarySearchQuick() (10 ms)
   âœ“ algorithmic.binarySearch() (24 ms)
   âœ“ algorithmic.binarySearchUpper() (29 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.binarySearch() (261 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (93 ms)
   âœ“ algorithmic.binarySearchUpper() (93 ms)

 RUNNING  ./benchmark\searching\binary\lower_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\lower_bound_benchmark.dart (50 s)
 Benchmark lower bound
  In a sorted list of 1000000000 numbers
   âœ“ collection.lowerBound() (261 ms)
   âœ“ algorithmic.lowerBound() (22 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.lowerBound() (252 ms)
   âœ“ algorithmic.lowerBound() (23 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.lowerBound() (250 ms)
   âœ“ algorithmic.lowerBoundBy() (91 ms)

 RUNNING  ./benchmark\searching\binary\upper_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\upper_bound_benchmark.dart (33 s)
 Benchmark upper bound
  In a sorted list of 1000000000 numbers
   âœ“ algorithmic.upperBound() (29 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ algorithmic.upperBound() (90 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ algorithmic.upperBound() (29 ms)

 RUNNING  ./benchmark\searching\linear\forward_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\forward_linear_benchmark.dart (12 s)
 Linear search in a list of 1777000 numbers
  âœ“ list.indexOf() (59 ms)
  âœ“ algorithmic.linearSearch() (59 ms)
 Linear search in a list of 1777000 numbers with a tester
  âœ“ list.indexWhere() (409 ms)
  âœ“ algorithmic.linearSearchBy() (414 ms)

 RUNNING  ./benchmark\searching\linear\reverse_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\reverse_linear_benchmark.dart (16 s)
 Reversed linear search in a list of 1777000 numbers
  âœ“ list.lastIndexOf() (87 ms)
  âœ“ algorithmic.linearSearchReversed() (73 ms)
 Reversed Linear search in a list of 1777000 numbers with a tester
  âœ“ list.lastIndexWhere() (414 ms)
  âœ“ algorithmic.linearSearchReversedBy() (404 ms)

 RUNNING  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart[68D DONE  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart (57 s)
 In a decreasing list of 32 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (279 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (223 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (166 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (149 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (108 us)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (112 us)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (117 us)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (80 us)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (83 us)
 In a decreasing list of 1000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (14 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (9 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (7 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (4 ms)
 In a decreasing list of 3000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (25 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (18 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (14 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (13 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (14 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (18 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (20 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (21 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (24 ms)

 RUNNING  ./benchmark\sorting\counting_benchmark.dart[53D DONE  ./benchmark\sorting\counting_benchmark.dart (38 s)
 Counting sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (275 ms)
   âœ“ algorithmic.countingSort() (50 ms)
   âœ“ algorithmic.countingSortOf() (132 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (275 ms)
   âœ“ algorithmic.countingSort() (51 ms)
   âœ“ algorithmic.countingSortOf() (129 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (286 ms)
   âœ“ algorithmic.countingSort() (52 ms)
   âœ“ algorithmic.countingSortOf() (124 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (176 ms)
   âœ“ algorithmic.countingSort() (22 ms)
   âœ“ algorithmic.countingSortOf() (74 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (278 ms)
   âœ“ algorithmic.countingSort() (49 ms)
   âœ“ algorithmic.countingSortOf() (128 ms)

 RUNNING  ./benchmark\sorting\mergesort_benchmark.dart[54D DONE  ./benchmark\sorting\mergesort_benchmark.dart (25 s)
 Mergesort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (280 ms)
   âœ“ algorithmic.mergeSort() (318 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.mergeSort() (319 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (288 ms)
   âœ“ algorithmic.mergeSort() (328 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (176 ms)
   âœ“ algorithmic.mergeSort() (320 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (276 ms)
   âœ“ algorithmic.mergeSort() (517 ms)

 RUNNING  ./benchmark\sorting\n_square_time_benchmark.dart[58D DONE  ./benchmark\sorting\n_square_time_benchmark.dart (76 s)
 Benchmark sort algorithms with small list of integers
  In a shuffled list of 32 numbers
   âœ“ list.sort() (127 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (36 us)
   âœ“ algorithmic.insertionSort() (42 us)
   âœ“ algorithmic.combSort() (94 us)
   âœ“ algorithmic.selectionSort() (368 us)
   âœ“ algorithmic.bubbleSort() (473 us)
  In an increasing list of 32 numbers
   âœ“ list.sort() (132 us)
   âœ“ algorithmic.cocktailShakerSort() (33 us)
   âœ“ algorithmic.gnomeSort() (36 us)
   âœ“ algorithmic.insertionSort() (42 us)
   âœ“ algorithmic.combSort() (95 us)
   âœ“ algorithmic.selectionSort() (365 us)
   âœ“ algorithmic.bubbleSort() (472 us)
  In a decreasing list of 32 numbers
   âœ“ list.sort() (138 us)
   âœ“ algorithmic.cocktailShakerSort() (35 us)
   âœ“ algorithmic.gnomeSort() (39 us)
   âœ“ algorithmic.insertionSort() (44 us)
   âœ“ algorithmic.combSort() (96 us)
   âœ“ algorithmic.selectionSort() (375 us)
   âœ“ algorithmic.bubbleSort() (490 us)
  In a list of 32 numbers with 1000 repetead elements
   âœ“ list.sort() (132 us)
   âœ“ algorithmic.cocktailShakerSort() (33 us)
   âœ“ algorithmic.gnomeSort() (36 us)
   âœ“ algorithmic.insertionSort() (42 us)
   âœ“ algorithmic.combSort() (95 us)
   âœ“ algorithmic.selectionSort() (369 us)
   âœ“ algorithmic.bubbleSort() (473 us)
  In an increasing list of 32 numbers with a custom compare
   âœ“ list.sort() (341 us)
   âœ“ algorithmic.cocktailShakerSort() (33 us)
   âœ“ algorithmic.gnomeSort() (105 us)
   âœ“ algorithmic.insertionSort() (99 us)
   âœ“ algorithmic.combSort() (95 us)
   âœ“ algorithmic.selectionSort() (1 ms)
   âœ“ algorithmic.bubbleSort() (1 ms)

 RUNNING  ./benchmark\sorting\quicksort_benchmark.dart[54D DONE  ./benchmark\sorting\quicksort_benchmark.dart (38 s)
 Quicksort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (280 ms)
   âœ“ algorithmic.quickSortHaore() (52 ms)
   âœ“ algorithmic.quickSortLomuto() (207 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.quickSortHaore() (53 ms)
   âœ“ algorithmic.quickSortLomuto() (205 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (288 ms)
   âœ“ algorithmic.quickSortHaore() (52 ms)
   âœ“ algorithmic.quickSortLomuto() (287 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (179 ms)
   âœ“ algorithmic.quickSortHaore() (38 ms)
   âœ“ algorithmic.quickSortLomuto() (126 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (280 ms)
   âœ“ algorithmic.quickSortHaore() (273 ms)
   âœ“ algorithmic.quickSortLomuto() (794 ms)

 RUNNING  ./benchmark\sorting\quicksort_threshold_benchmark.dart[64D DONE  ./benchmark\sorting\quicksort_threshold_benchmark.dart (17 s)
 Benchmark Quicksort with different [threshold]
  âœ“ algorithmic.quickSortHaore(threshold = 0) (760 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 4) (785 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 8) (652 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 16) (572 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 32) (527 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 48) (534 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 64) (500 ms)

Benchmark suites: 11 passed, 11 total
Benchmarks:       138 passed, 138 total
Time:             458 s
Ran all benchmark suites.
