 RUNNING  ./benchmark\searching\binary\binary_search_benchmark.dart[67D DONE  ./benchmark\searching\binary\binary_search_benchmark.dart (247 s)
 Benchmark binary searching
  In a sorted list of 1000000000 numbers
   âœ“ collection.binarySearch() (255 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (24 ms)
   âœ“ algorithmic.binarySearchUpper() (30 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.binarySearch() (154 ms)
   âœ“ algorithmic.binarySearchQuick() (11 ms)
   âœ“ algorithmic.binarySearch() (25 ms)
   âœ“ algorithmic.binarySearchUpper() (31 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.binarySearch() (262 ms)
   âœ“ algorithmic.binarySearchQuick() (24 ms)
   âœ“ algorithmic.binarySearch() (94 ms)
   âœ“ algorithmic.binarySearchUpper() (93 ms)

 RUNNING  ./benchmark\searching\binary\lower_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\lower_bound_benchmark.dart (128 s)
 Benchmark lower bound
  In a sorted list of 1000000000 numbers
   âœ“ collection.lowerBound() (259 ms)
   âœ“ algorithmic.lowerBound() (22 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.lowerBound() (256 ms)
   âœ“ algorithmic.lowerBound() (25 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.lowerBound() (261 ms)
   âœ“ algorithmic.lowerBoundBy() (90 ms)

 RUNNING  ./benchmark\searching\binary\upper_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\upper_bound_benchmark.dart (35 s)
 Benchmark upper bound
  In a sorted list of 1000000000 numbers
   âœ“ algorithmic.upperBound() (32 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ algorithmic.upperBound() (89 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ algorithmic.upperBound() (32 ms)

 RUNNING  ./benchmark\searching\linear\forward_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\forward_linear_benchmark.dart (13 s)
 Linear search in a list of 1777000 numbers
  âœ“ list.indexOf() (60 ms)
  âœ“ algorithmic.linearSearch() (60 ms)
 Linear search in a list of 1777000 numbers with a tester
  âœ“ list.indexWhere() (392 ms)
  âœ“ algorithmic.linearSearchBy() (422 ms)

 RUNNING  ./benchmark\searching\linear\reverse_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\reverse_linear_benchmark.dart (16 s)
 Reversed linear search in a list of 1777000 numbers
  âœ“ list.lastIndexOf() (89 ms)
  âœ“ algorithmic.linearSearchReversed() (75 ms)
 Reversed Linear search in a list of 1777000 numbers with a tester
  âœ“ list.lastIndexWhere() (397 ms)
  âœ“ algorithmic.linearSearchReversedBy() (431 ms)

 RUNNING  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart[68D DONE  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart (57 s)
 In a decreasing list of 32 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (272 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (217 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (162 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (131 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (98 us)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (115 us)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (105 us)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (74 us)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (76 us)
 In a decreasing list of 1000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (12 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (8 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (7 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (5 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (4 ms)
 In a decreasing list of 3000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (22 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (15 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (12 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (11 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (12 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (16 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (19 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (21 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (23 ms)

 RUNNING  ./benchmark\sorting\counting_benchmark.dart[53D DONE  ./benchmark\sorting\counting_benchmark.dart (37 s)
 Counting sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.countingSort() (53 ms)
   âœ“ algorithmic.countingSortOf() (131 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (280 ms)
   âœ“ algorithmic.countingSort() (54 ms)
   âœ“ algorithmic.countingSortOf() (129 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (291 ms)
   âœ“ algorithmic.countingSort() (55 ms)
   âœ“ algorithmic.countingSortOf() (123 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (180 ms)
   âœ“ algorithmic.countingSort() (22 ms)
   âœ“ algorithmic.countingSortOf() (72 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.countingSort() (54 ms)
   âœ“ algorithmic.countingSortOf() (127 ms)

 RUNNING  ./benchmark\sorting\mergesort_benchmark.dart[54D DONE  ./benchmark\sorting\mergesort_benchmark.dart (25 s)
 Mergesort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (284 ms)
   âœ“ algorithmic.mergeSort() (324 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (283 ms)
   âœ“ algorithmic.mergeSort() (325 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (295 ms)
   âœ“ algorithmic.mergeSort() (334 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (181 ms)
   âœ“ algorithmic.mergeSort() (329 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (280 ms)
   âœ“ algorithmic.mergeSort() (512 ms)

 RUNNING  ./benchmark\sorting\n_square_time_benchmark.dart[58D DONE  ./benchmark\sorting\n_square_time_benchmark.dart (76 s)
 Benchmark sort algorithms with small list of integers
  In a shuffled list of 32 numbers
   âœ“ list.sort() (260 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (39 us)
   âœ“ algorithmic.insertionSort() (41 us)
   âœ“ algorithmic.combSort() (93 us)
   âœ“ algorithmic.selectionSort() (379 us)
   âœ“ algorithmic.bubbleSort() (466 us)
  In an increasing list of 32 numbers
   âœ“ list.sort() (132 us)
   âœ“ algorithmic.cocktailShakerSort() (33 us)
   âœ“ algorithmic.gnomeSort() (36 us)
   âœ“ algorithmic.insertionSort() (42 us)
   âœ“ algorithmic.combSort() (93 us)
   âœ“ algorithmic.selectionSort() (380 us)
   âœ“ algorithmic.bubbleSort() (467 us)
  In a decreasing list of 32 numbers
   âœ“ list.sort() (133 us)
   âœ“ algorithmic.cocktailShakerSort() (34 us)
   âœ“ algorithmic.gnomeSort() (39 us)
   âœ“ algorithmic.insertionSort() (47 us)
   âœ“ algorithmic.combSort() (94 us)
   âœ“ algorithmic.selectionSort() (397 us)
   âœ“ algorithmic.bubbleSort() (523 us)
  In a list of 32 numbers with 4 repetead elements
   âœ“ list.sort() (135 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (40 us)
   âœ“ algorithmic.insertionSort() (46 us)
   âœ“ algorithmic.combSort() (99 us)
   âœ“ algorithmic.selectionSort() (399 us)
   âœ“ algorithmic.bubbleSort() (466 us)
  In an increasing list of 32 numbers with a custom compare
   âœ“ list.sort() (139 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (103 us)
   âœ“ algorithmic.insertionSort() (108 us)
   âœ“ algorithmic.combSort() (93 us)
   âœ“ algorithmic.selectionSort() (1 ms)
   âœ“ algorithmic.bubbleSort() (1 ms)

 RUNNING  ./benchmark\sorting\quicksort_benchmark.dart[54D DONE  ./benchmark\sorting\quicksort_benchmark.dart (39 s)
 Quicksort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.quickSortHaore() (57 ms)
   âœ“ algorithmic.quickSortLomuto() (211 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.quickSortHaore() (56 ms)
   âœ“ algorithmic.quickSortLomuto() (210 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (290 ms)
   âœ“ algorithmic.quickSortHaore() (58 ms)
   âœ“ algorithmic.quickSortLomuto() (272 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (178 ms)
   âœ“ algorithmic.quickSortHaore() (39 ms)
   âœ“ algorithmic.quickSortLomuto() (125 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.quickSortHaore() (280 ms)
   âœ“ algorithmic.quickSortLomuto() (855 ms)

 RUNNING  ./benchmark\sorting\quicksort_threshold_benchmark.dart[64D DONE  ./benchmark\sorting\quicksort_threshold_benchmark.dart (17 s)
 Benchmark Quicksort with different [threshold]
  âœ“ algorithmic.quickSortHaore(threshold = 0) (771 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 4) (795 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 8) (657 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 16) (577 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 32) (530 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 48) (537 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 64) (501 ms)

 RUNNING  ./benchmark\sorting\radix_sort_benchmark.dart[55D DONE  ./benchmark\sorting\radix_sort_benchmark.dart (37 s)
 Radix sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (284 ms)
   âœ“ algorithmic.radixSort() (129 ms)
   âœ“ algorithmic.radixSortOf() (315 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.radixSort() (129 ms)
   âœ“ algorithmic.radixSortOf() (312 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (291 ms)
   âœ“ algorithmic.radixSort() (128 ms)
   âœ“ algorithmic.radixSortOf() (312 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (179 ms)
   âœ“ algorithmic.radixSort() (53 ms)
   âœ“ algorithmic.radixSortOf() (114 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.radixSort() (135 ms)
   âœ“ algorithmic.radixSortOf() (322 ms)

 RUNNING  ./benchmark\sorting\radix_sort_radix_power_benchmark.dart[67D DONE  ./benchmark\sorting\radix_sort_radix_power_benchmark.dart (26 s)
 In a decreasing list of 777000 numbers
  âœ“ algorithmic.radixSort(radixPower: 4) (394 ms)
  âœ“ algorithmic.radixSort(radixPower: 5) (321 ms)
  âœ“ algorithmic.radixSort(radixPower: 6) (302 ms)
  âœ“ algorithmic.radixSort(radixPower: 7) (212 ms)
  âœ“ algorithmic.radixSort(radixPower: 8) (217 ms)
  âœ“ algorithmic.radixSort(radixPower: 9 (203 ms)
  âœ“ algorithmic.radixSort(radixPower: 10 (129 ms)
  âœ“ algorithmic.radixSort(radixPower: 11 (130 ms)
  âœ“ algorithmic.radixSort(radixPower: 12 (131 ms)
  âœ“ algorithmic.radixSort(radixPower: 13 (138 ms)
  âœ“ algorithmic.radixSort(radixPower: 14 (149 ms)

 RUNNING  ./benchmark\string\metric\levenshtein_benchmark.dart[62D DONE  ./benchmark\string\metric\levenshtein_benchmark.dart (27 s)
 Two lists of 5000 items
  âœ“ edit_distance.Levenshtein().distance() (617 ms)
  âœ“ string_extensions.getLevenshtein() (673 ms)
  âœ“ algorithmic.levenshtein() (495 ms)
 Two lists of 100 items
  âœ“ edit_distance.Levenshtein().distance() (22 ms)
  âœ“ string_extensions.getLevenshtein() (26 ms)
  âœ“ algorithmic.levenshtein() (19 ms)
 Two lists of 100 vs 10000 items
  âœ“ edit_distance.Levenshtein().distance() (213 ms)
  âœ“ string_extensions.getLevenshtein() (201 ms)
  âœ“ algorithmic.levenshtein() (209 ms)
 Two lists of 10000 vs 100 items
  âœ“ edit_distance.Levenshtein().distance() (237 ms)
  âœ“ string_extensions.getLevenshtein() (260 ms)
  âœ“ algorithmic.levenshtein() (211 ms)

Benchmark suites: 14 passed, 14 total
Benchmarks:       176 passed, 176 total
Time:             786 s
Ran all benchmark suites.
