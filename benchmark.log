 RUNNING  ./benchmark\searching\binary\binary_search_benchmark.dart[67D DONE  ./benchmark\searching\binary\binary_search_benchmark.dart (96 s)
 Benchmark binary searching
  In a sorted list of 1000000000 numbers
   âœ“ collection.binarySearch() (249 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (24 ms)
   âœ“ algorithmic.binarySearchUpper() (28 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.binarySearch() (145 ms)
   âœ“ algorithmic.binarySearchQuick() (10 ms)
   âœ“ algorithmic.binarySearch() (25 ms)
   âœ“ algorithmic.binarySearchUpper() (29 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.binarySearch() (253 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (86 ms)
   âœ“ algorithmic.binarySearchUpper() (93 ms)

 RUNNING  ./benchmark\searching\binary\lower_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\lower_bound_benchmark.dart (64 s)
 Benchmark lower bound
  In a sorted list of 1000000000 numbers
   âœ“ collection.lowerBound() (258 ms)
   âœ“ algorithmic.lowerBound() (22 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.lowerBound() (255 ms)
   âœ“ algorithmic.lowerBound() (23 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.lowerBound() (257 ms)
   âœ“ algorithmic.lowerBoundBy() (89 ms)

 RUNNING  ./benchmark\searching\binary\upper_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\upper_bound_benchmark.dart (32 s)
 Benchmark upper bound
  In a sorted list of 1000000000 numbers
   âœ“ algorithmic.upperBound() (30 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ algorithmic.upperBound() (89 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ algorithmic.upperBound() (30 ms)

 RUNNING  ./benchmark\searching\linear\forward_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\forward_linear_benchmark.dart (13 s)
 Linear search in a list of 1777000 numbers
  âœ“ list.indexOf() (61 ms)
  âœ“ algorithmic.linearSearch() (59 ms)
 Linear search in a list of 1777000 numbers with a tester
  âœ“ list.indexWhere() (392 ms)
  âœ“ algorithmic.linearSearchBy() (416 ms)

 RUNNING  ./benchmark\searching\linear\reverse_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\reverse_linear_benchmark.dart (17 s)
 Reversed linear search in a list of 1777000 numbers
  âœ“ list.lastIndexOf() (87 ms)
  âœ“ algorithmic.linearSearchReversed() (73 ms)
 Reversed Linear search in a list of 1777000 numbers with a tester
  âœ“ list.lastIndexWhere() (388 ms)
  âœ“ algorithmic.linearSearchReversedBy() (428 ms)

 RUNNING  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart[68D DONE  ./benchmark\sorting\comb_sort_shrink_factor_benchmark.dart (57 s)
 In a decreasing list of 32 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (263 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (211 us)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (152 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (132 us)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (97 us)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (100 us)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (103 us)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (76 us)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (74 us)
 In a decreasing list of 1000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (12 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (8 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (6 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (4 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (4 ms)
 In a decreasing list of 3000 numbers
  âœ“ algorithmic.combSort(shrinkFactor: 1.3) (22 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.5) (15 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 1.7) (12 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.2) (11 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 2.5) (12 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 3.2) (16 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 4) (19 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 5) (21 ms)
  âœ“ algorithmic.combSort(shrinkFactor: 8) (23 ms)

 RUNNING  ./benchmark\sorting\counting_benchmark.dart[53D DONE  ./benchmark\sorting\counting_benchmark.dart (37 s)
 Counting sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (285 ms)
   âœ“ algorithmic.countingSort() (53 ms)
   âœ“ algorithmic.countingSortOf() (135 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (292 ms)
   âœ“ algorithmic.countingSort() (54 ms)
   âœ“ algorithmic.countingSortOf() (132 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (293 ms)
   âœ“ algorithmic.countingSort() (54 ms)
   âœ“ algorithmic.countingSortOf() (127 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (183 ms)
   âœ“ algorithmic.countingSort() (22 ms)
   âœ“ algorithmic.countingSortOf() (75 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (289 ms)
   âœ“ algorithmic.countingSort() (53 ms)
   âœ“ algorithmic.countingSortOf() (131 ms)

 RUNNING  ./benchmark\sorting\mergesort_benchmark.dart[54D DONE  ./benchmark\sorting\mergesort_benchmark.dart (25 s)
 Mergesort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (278 ms)
   âœ“ algorithmic.mergeSort() (311 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (278 ms)
   âœ“ algorithmic.mergeSort() (314 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (287 ms)
   âœ“ algorithmic.mergeSort() (326 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (180 ms)
   âœ“ algorithmic.mergeSort() (323 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (279 ms)
   âœ“ algorithmic.mergeSort() (588 ms)

 RUNNING  ./benchmark\sorting\n_square_time_benchmark.dart[58D DONE  ./benchmark\sorting\n_square_time_benchmark.dart (76 s)
 Benchmark sort algorithms with small list of integers
  In a shuffled list of 32 numbers
   âœ“ list.sort() (131 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (38 us)
   âœ“ algorithmic.insertionSort() (52 us)
   âœ“ algorithmic.combSort() (94 us)
   âœ“ algorithmic.selectionSort() (369 us)
   âœ“ algorithmic.bubbleSort() (476 us)
  In an increasing list of 32 numbers
   âœ“ list.sort() (135 us)
   âœ“ algorithmic.cocktailShakerSort() (33 us)
   âœ“ algorithmic.gnomeSort() (39 us)
   âœ“ algorithmic.insertionSort() (52 us)
   âœ“ algorithmic.combSort() (96 us)
   âœ“ algorithmic.selectionSort() (365 us)
   âœ“ algorithmic.bubbleSort() (477 us)
  In a decreasing list of 32 numbers
   âœ“ list.sort() (135 us)
   âœ“ algorithmic.cocktailShakerSort() (35 us)
   âœ“ algorithmic.gnomeSort() (43 us)
   âœ“ algorithmic.insertionSort() (56 us)
   âœ“ algorithmic.combSort() (97 us)
   âœ“ algorithmic.selectionSort() (363 us)
   âœ“ algorithmic.bubbleSort() (480 us)
  In a list of 32 numbers with 1000 repetead elements
   âœ“ list.sort() (134 us)
   âœ“ algorithmic.cocktailShakerSort() (33 us)
   âœ“ algorithmic.gnomeSort() (39 us)
   âœ“ algorithmic.insertionSort() (53 us)
   âœ“ algorithmic.combSort() (99 us)
   âœ“ algorithmic.selectionSort() (361 us)
   âœ“ algorithmic.bubbleSort() (477 us)
  In an increasing list of 32 numbers with a custom compare
   âœ“ list.sort() (328 us)
   âœ“ algorithmic.cocktailShakerSort() (33 us)
   âœ“ algorithmic.gnomeSort() (103 us)
   âœ“ algorithmic.insertionSort() (99 us)
   âœ“ algorithmic.combSort() (96 us)
   âœ“ algorithmic.selectionSort() (1 ms)
   âœ“ algorithmic.bubbleSort() (1 ms)

 RUNNING  ./benchmark\sorting\quicksort_benchmark.dart[54D DONE  ./benchmark\sorting\quicksort_benchmark.dart (39 s)
 Quicksort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (288 ms)
   âœ“ algorithmic.quickSortHaore() (52 ms)
   âœ“ algorithmic.quickSortLomuto() (209 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (289 ms)
   âœ“ algorithmic.quickSortHaore() (52 ms)
   âœ“ algorithmic.quickSortLomuto() (209 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (297 ms)
   âœ“ algorithmic.quickSortHaore() (53 ms)
   âœ“ algorithmic.quickSortLomuto() (271 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (184 ms)
   âœ“ algorithmic.quickSortHaore() (39 ms)
   âœ“ algorithmic.quickSortLomuto() (125 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (279 ms)
   âœ“ algorithmic.quickSortHaore() (275 ms)
   âœ“ algorithmic.quickSortLomuto() (820 ms)

 RUNNING  ./benchmark\sorting\quicksort_threshold_benchmark.dart[64D DONE  ./benchmark\sorting\quicksort_threshold_benchmark.dart (17 s)
 Benchmark Quicksort with different [threshold]
  âœ“ algorithmic.quickSortHaore(threshold = 0) (764 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 4) (800 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 8) (659 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 16) (578 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 32) (527 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 48) (534 ms)
  âœ“ algorithmic.quickSortHaore(threshold = 64) (496 ms)

 RUNNING  ./benchmark\sorting\radix_sort_benchmark.dart[55D DONE  ./benchmark\sorting\radix_sort_benchmark.dart (37 s)
 Radix sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.radixSort() (132 ms)
   âœ“ algorithmic.radixSortOf() (326 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (279 ms)
   âœ“ algorithmic.radixSort() (131 ms)
   âœ“ algorithmic.radixSortOf() (322 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (286 ms)
   âœ“ algorithmic.radixSort() (132 ms)
   âœ“ algorithmic.radixSortOf() (321 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (178 ms)
   âœ“ algorithmic.radixSort() (55 ms)
   âœ“ algorithmic.radixSortOf() (121 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (280 ms)
   âœ“ algorithmic.radixSort() (140 ms)
   âœ“ algorithmic.radixSortOf() (340 ms)

 RUNNING  ./benchmark\sorting\radix_sort_radix_power_benchmark.dart[67D DONE  ./benchmark\sorting\radix_sort_radix_power_benchmark.dart (25 s)
 In a decreasing list of 777000 numbers
  âœ“ algorithmic.radixSort(radixPower: 4) (410 ms)
  âœ“ algorithmic.radixSort(radixPower: 5) (327 ms)
  âœ“ algorithmic.radixSort(radixPower: 6) (308 ms)
  âœ“ algorithmic.radixSort(radixPower: 7) (222 ms)
  âœ“ algorithmic.radixSort(radixPower: 8) (229 ms)
  âœ“ algorithmic.radixSort(radixPower: 9 (214 ms)
  âœ“ algorithmic.radixSort(radixPower: 10 (134 ms)
  âœ“ algorithmic.radixSort(radixPower: 11 (135 ms)
  âœ“ algorithmic.radixSort(radixPower: 12 (135 ms)
  âœ“ algorithmic.radixSort(radixPower: 13 (142 ms)
  âœ“ algorithmic.radixSort(radixPower: 14 (157 ms)

Benchmark suites: 13 passed, 13 total
Benchmarks:       164 passed, 164 total
Time:             540 s
Ran all benchmark suites.
