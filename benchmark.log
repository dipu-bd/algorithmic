 RUNNING  ./benchmark\searching\binary\binary_search_benchmark.dart[67D DONE  ./benchmark\searching\binary\binary_search_benchmark.dart (93 s)
 Benchmark binary searching
  In a sorted list of 1000000000 numbers
   âœ“ collection.binarySearch() (265 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (23 ms)
   âœ“ algorithmic.binarySearchUpper() (30 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.binarySearch() (149 ms)
   âœ“ algorithmic.binarySearchQuick() (10 ms)
   âœ“ algorithmic.binarySearch() (24 ms)
   âœ“ algorithmic.binarySearchUpper() (29 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.binarySearch() (263 ms)
   âœ“ algorithmic.binarySearchQuick() (23 ms)
   âœ“ algorithmic.binarySearch() (91 ms)
   âœ“ algorithmic.binarySearchUpper() (81 ms)

 RUNNING  ./benchmark\searching\binary\lower_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\lower_bound_benchmark.dart (71 s)
 Benchmark lower bound
  In a sorted list of 1000000000 numbers
   âœ“ collection.lowerBound() (256 ms)
   âœ“ algorithmic.lowerBound() (22 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ collection.lowerBound() (259 ms)
   âœ“ algorithmic.lowerBound() (23 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ collection.lowerBound() (262 ms)
   âœ“ algorithmic.lowerBoundBy() (90 ms)

 RUNNING  ./benchmark\searching\binary\upper_bound_benchmark.dart[65D DONE  ./benchmark\searching\binary\upper_bound_benchmark.dart (33 s)
 Benchmark upper bound
  In a sorted list of 1000000000 numbers
   âœ“ algorithmic.upperBound() (26 ms)
  In a sorted list of 1000000000 numbers with repeated items
   âœ“ algorithmic.upperBound() (86 ms)
  In a sorted list of 1000000000 numbers with a custom compare
   âœ“ algorithmic.upperBound() (25 ms)

 RUNNING  ./benchmark\searching\linear\forward_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\forward_linear_benchmark.dart (13 s)
 Linear search in a list of 1777000 numbers
  âœ“ list.indexOf() (60 ms)
  âœ“ algorithmic.linearSearch() (59 ms)
 Linear search in a list of 1777000 numbers with a tester
  âœ“ list.indexWhere() (390 ms)
  âœ“ algorithmic.linearSearchBy() (417 ms)

 RUNNING  ./benchmark\searching\linear\reverse_linear_benchmark.dart[68D DONE  ./benchmark\searching\linear\reverse_linear_benchmark.dart (16 s)
 Reversed linear search in a list of 1777000 numbers
  âœ“ list.lastIndexOf() (88 ms)
  âœ“ algorithmic.linearSearchReversed() (73 ms)
 Reversed Linear search in a list of 1777000 numbers with a tester
  âœ“ list.lastIndexWhere() (389 ms)
  âœ“ algorithmic.linearSearchReversedBy() (429 ms)

 RUNNING  ./benchmark\sorting\counting_benchmark.dart[53D DONE  ./benchmark\sorting\counting_benchmark.dart (39 s)
 Counting sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.countingSort() (54 ms)
   âœ“ algorithmic.countingSortOf() (131 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.countingSort() (55 ms)
   âœ“ algorithmic.countingSortOf() (129 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (293 ms)
   âœ“ algorithmic.countingSort() (56 ms)
   âœ“ algorithmic.countingSortOf() (126 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (180 ms)
   âœ“ algorithmic.countingSort() (24 ms)
   âœ“ algorithmic.countingSortOf() (74 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.countingSort() (55 ms)
   âœ“ algorithmic.countingSortOf() (125 ms)

 RUNNING  ./benchmark\sorting\mergesort_benchmark.dart[54D DONE  ./benchmark\sorting\mergesort_benchmark.dart (25 s)
 Mergesort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.mergeSort() (320 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.mergeSort() (326 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (289 ms)
   âœ“ algorithmic.mergeSort() (336 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (184 ms)
   âœ“ algorithmic.mergeSort() (338 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (282 ms)
   âœ“ algorithmic.mergeSort() (642 ms)

 RUNNING  ./benchmark\sorting\n_square_time_benchmark.dart[58D DONE  ./benchmark\sorting\n_square_time_benchmark.dart (76 s)
 Benchmark sort algorithms with small list of integers
  In a shuffled list of 32 numbers
   âœ“ list.sort() (124 us)
   âœ“ algorithmic.cocktailShakerSort() (31 us)
   âœ“ algorithmic.gnomeSort() (42 us)
   âœ“ algorithmic.insertionSort() (41 us)
   âœ“ algorithmic.combSort() (137 us)
   âœ“ algorithmic.selectionSort() (396 us)
   âœ“ algorithmic.bubbleSort() (465 us)
  In an increasing list of 32 numbers
   âœ“ list.sort() (131 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (43 us)
   âœ“ algorithmic.insertionSort() (41 us)
   âœ“ algorithmic.combSort() (136 us)
   âœ“ algorithmic.selectionSort() (394 us)
   âœ“ algorithmic.bubbleSort() (465 us)
  In a decreasing list of 32 numbers
   âœ“ list.sort() (132 us)
   âœ“ algorithmic.cocktailShakerSort() (34 us)
   âœ“ algorithmic.gnomeSort() (47 us)
   âœ“ algorithmic.insertionSort() (45 us)
   âœ“ algorithmic.combSort() (138 us)
   âœ“ algorithmic.selectionSort() (394 us)
   âœ“ algorithmic.bubbleSort() (488 us)
  In a list of 32 numbers with 4 repetead elements
   âœ“ list.sort() (132 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (41 us)
   âœ“ algorithmic.insertionSort() (45 us)
   âœ“ algorithmic.combSort() (141 us)
   âœ“ algorithmic.selectionSort() (386 us)
   âœ“ algorithmic.bubbleSort() (464 us)
  In an increasing list of 32 numbers with a custom compare
   âœ“ list.sort() (319 us)
   âœ“ algorithmic.cocktailShakerSort() (32 us)
   âœ“ algorithmic.gnomeSort() (103 us)
   âœ“ algorithmic.insertionSort() (108 us)
   âœ“ algorithmic.combSort() (136 us)
   âœ“ algorithmic.selectionSort() (1 ms)
   âœ“ algorithmic.bubbleSort() (1 ms)

 RUNNING  ./benchmark\sorting\quicksort_benchmark.dart[54D DONE  ./benchmark\sorting\quicksort_benchmark.dart (39 s)
 Quicksort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.quickSortHaore() (56 ms)
   âœ“ algorithmic.quickSortLomuto() (210 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (281 ms)
   âœ“ algorithmic.quickSortHaore() (56 ms)
   âœ“ algorithmic.quickSortLomuto() (209 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (289 ms)
   âœ“ algorithmic.quickSortHaore() (57 ms)
   âœ“ algorithmic.quickSortLomuto() (270 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (179 ms)
   âœ“ algorithmic.quickSortHaore() (39 ms)
   âœ“ algorithmic.quickSortLomuto() (125 ms)
  In an increasing list of 777000 numbers with a custom compare
   âœ“ list.sort() (279 ms)
   âœ“ algorithmic.quickSortHaore() (281 ms)
   âœ“ algorithmic.quickSortLomuto() (851 ms)

 RUNNING  ./benchmark\sorting\radix_sort_benchmark.dart[55D DONE  ./benchmark\sorting\radix_sort_benchmark.dart (37 s)
 Radix sort algorithms benchmark
  In a shuffled list of 777000 numbers
   âœ“ list.sort() (288 ms)
   âœ“ algorithmic.radixSort() (128 ms)
   âœ“ algorithmic.radixSortOf() (320 ms)
  In an increasing list of 777000 numbers
   âœ“ list.sort() (288 ms)
   âœ“ algorithmic.radixSort() (129 ms)
   âœ“ algorithmic.radixSortOf() (314 ms)
  In a decreasing list of 777000 numbers
   âœ“ list.sort() (295 ms)
   âœ“ algorithmic.radixSort() (128 ms)
   âœ“ algorithmic.radixSortOf() (308 ms)
  In a list of 777000 numbers with 1000 repetead elements
   âœ“ list.sort() (183 ms)
   âœ“ algorithmic.radixSort() (54 ms)
   âœ“ algorithmic.radixSortOf() (115 ms)
  In an increasing list of 777000 numbers in reverse order
   âœ“ list.sort() (275 ms)
   âœ“ algorithmic.radixSort() (134 ms)
   âœ“ algorithmic.radixSortOf() (319 ms)

 RUNNING  ./benchmark\string\metric\damerau_levenshtein_benchmark.dart[70D DONE  ./benchmark\string\metric\damerau_levenshtein_benchmark.dart (27 s)
 Two lists of 1000 items each
  âœ“ edit_distance.Damerau().distance() (430 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (42 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (260 ms)
 Two lists of 100 items each
  âœ“ edit_distance.Damerau().distance() (365 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (43 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (251 ms)
 Two lists of 100 vs 1000 items
  âœ“ edit_distance.Damerau().distance() (360 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (38 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (249 ms)
 Two lists of 1000 vs 100 items
  âœ“ edit_distance.Damerau().distance() (375 ms)
  âœ“ algorithmic.restrictedDamerauDistance() (44 ms)
  âœ“ algorithmic.damerauLevenshteinDistance() (244 ms)

 RUNNING  ./benchmark\string\metric\jaro_winkler_benchmark.dart[63D DONE  ./benchmark\string\metric\jaro_winkler_benchmark.dart (26 s)
 Two lists of 10000 items each
  âœ“ edit_distance.JaroWinkler().normalizedDistance() (190 ms)
  âœ“ algorithmic.jaroWinklerSimilarityOf() (189 ms)
  âœ“ algorithmic.jaroSimilarityOf() (196 ms)
 Two lists of 100 items each
  âœ“ edit_distance.JaroWinkler().normalizedDistance() (425 us)
  âœ“ algorithmic.jaroWinklerSimilarityOf() (424 us)
  âœ“ algorithmic.jaroSimilarityOf() (414 us)
 Two lists of 100 vs 100000 items
  âœ“ edit_distance.JaroWinkler().normalizedDistance() (48 ms)
  âœ“ algorithmic.jaroWinklerSimilarityOf() (37 ms)
  âœ“ algorithmic.jaroSimilarityOf() (37 ms)
 Two lists of 100000 vs 100 items
  âœ“ edit_distance.JaroWinkler().normalizedDistance() (49 ms)
  âœ“ algorithmic.jaroWinklerSimilarityOf() (38 ms)
  âœ“ algorithmic.jaroSimilarityOf() (38 ms)

 RUNNING  ./benchmark\string\metric\lcs_benchmark.dart[54D DONE  ./benchmark\string\metric\lcs_benchmark.dart (17 s)
 Two lists of 1000 items each
  âœ“ edit_distance.LongestCommonSubsequence().distance() (351 ms)
  âœ“ algorithmic.longestCommonSubsequenceLength() (155 ms)
 Two lists of 100 items each
  âœ“ edit_distance.LongestCommonSubsequence().distance() (36 ms)
  âœ“ algorithmic.longestCommonSubsequenceLength() (16 ms)
 Two lists of 100 vs 10000 items
  âœ“ edit_distance.LongestCommonSubsequence().distance() (340 ms)
  âœ“ algorithmic.longestCommonSubsequenceLength() (147 ms)
 Two lists of 10000 vs 100 items
  âœ“ edit_distance.LongestCommonSubsequence().distance() (390 ms)
  âœ“ algorithmic.longestCommonSubsequenceLength() (147 ms)

 RUNNING  ./benchmark\string\metric\levenshtein_benchmark.dart[62D DONE  ./benchmark\string\metric\levenshtein_benchmark.dart (17 s)
 Two lists of 5000 items each
  âœ“ edit_distance.Levenshtein().distance() (613 ms)
  âœ“ algorithmic.levenshteinDistance() (519 ms)
 Two lists of 100 items each
  âœ“ edit_distance.Levenshtein().distance() (21 ms)
  âœ“ algorithmic.levenshteinDistance() (19 ms)
 Two lists of 100 vs 10000 items
  âœ“ edit_distance.Levenshtein().distance() (200 ms)
  âœ“ algorithmic.levenshteinDistance() (155 ms)
 Two lists of 10000 vs 100 items
  âœ“ edit_distance.Levenshtein().distance() (235 ms)
  âœ“ algorithmic.levenshteinDistance() (154 ms)

 RUNNING  ./benchmark\string\metric\tversky_benchmark.dart[58D DONE  ./benchmark\string\metric\tversky_benchmark.dart (32 s)
 Two lists of 777000 items each
  âœ“ edit_distance.Jaccard().distance() (249 ms)
  âœ“ algorithmic.jaccardDistanceOf() (146 ms)
  âœ“ algorithmic.jaccardIndexOf() (150 ms)
  âœ“ algorithmic.diceIndexOf() (136 ms)
  âœ“ algorithmic.tverskyIndex() (143 ms)
 Two lists of 77 items each
  âœ“ edit_distance.Jaccard().distance() (631 us)
  âœ“ algorithmic.jaccardDistanceOf() (410 us)
  âœ“ algorithmic.jaccardIndexOf() (408 us)
  âœ“ algorithmic.diceIndexOf() (409 us)
  âœ“ algorithmic.tverskyIndex() (408 us)
 Two lists of 777000 items each | ngram: 77
  âœ“ edit_distance.Jaccard().distance() (337 ms)
  âœ“ algorithmic.jaccardDistanceOf() (347 ms)
  âœ“ algorithmic.jaccardIndexOf() (348 ms)
  âœ“ algorithmic.diceIndexOf() (348 ms)
  âœ“ algorithmic.tverskyIndex() (348 ms)

Benchmark suites: 15 passed, 15 total
Benchmarks:       174 passed, 174 total
Time:             568 s
Ran all benchmark suites.
